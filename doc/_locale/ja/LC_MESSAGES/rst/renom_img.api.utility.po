# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Grid
# This file is distributed under the same license as the ReNomIMG package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNomIMG \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-17 16:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/renom_img.api.utility.rst:2
msgid "renom\\_img.api.utility"
msgstr ""

#: ../../rst/renom_img.api.utility.rst:5
msgid "renom\\_img.api.utility.box"
msgstr ""

#: ../../rst/renom_img.api.utility.rst:12
msgid "renom\\_img.api.utility.load"
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:1
msgid "XML format must be Pascal VOC format."
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection
#: renom_img.api.utility.nms.nms renom_img.api.utility.nms.soft_nms
#: renom_img.api.utility.target.DataBuilderClassification
#: renom_img.api.utility.target.DataBuilderClassification.build
#: renom_img.api.utility.target.DataBuilderDetection
#: renom_img.api.utility.target.DataBuilderDetection.build
msgid "Parameters"
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:3
msgid "List of xml-file's path."
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection
#: renom_img.api.utility.nms.nms renom_img.api.utility.nms.soft_nms
#: renom_img.api.utility.target.DataBuilderClassification.build
#: renom_img.api.utility.target.DataBuilderDetection.build
msgid "Returns"
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:6
msgid ""
"This returns list of annotations.     Each annotation has a list of "
"dictionary which includes keys 'box' and 'name'.     The structure is "
"bellow. [     [ # Objects of 1st image.         {'box': [x(float), y, w, "
"h], 'name': class_name(string), 'class': id(int)},         {'box': "
"[x(float), y, w, h], 'name': class_name(string), 'class': id(int)},"
"         ...     ],     [ # Objects of 2nd image.         {'box': "
"[x(float), y, w, h], 'name': class_name(string), 'class': id(int)},"
"         {'box': [x(float), y, w, h], 'name': class_name(string), "
"'class': id(int)},         ...     ] ]"
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:9
msgid "This returns list of annotations."
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:9
msgid ""
"Each annotation has a list of dictionary which includes keys 'box' and "
"'name'. The structure is bellow."
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection:20
#: renom_img.api.utility.nms.nms:14 renom_img.api.utility.nms.nms:32
#: renom_img.api.utility.nms.soft_nms:13 renom_img.api.utility.nms.soft_nms:31
msgid "["
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection:14
#: renom_img.api.utility.nms.nms:7 renom_img.api.utility.nms.nms:25
#: renom_img.api.utility.nms.soft_nms:6 renom_img.api.utility.nms.soft_nms:24
msgid "[ # Objects of 1st image."
msgstr ""

#: of renom_img.api.utility.load.parse_xml_detection:13
#: renom_img.api.utility.load.parse_xml_detection:18
msgid ""
"{'box': [x(float), y, w, h], 'name': class_name(string), 'class': "
"id(int)}, {'box': [x(float), y, w, h], 'name': class_name(string), "
"'class': id(int)}, ..."
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection:16
#: renom_img.api.utility.nms.nms:9 renom_img.api.utility.nms.nms:27
#: renom_img.api.utility.nms.soft_nms:8 renom_img.api.utility.nms.soft_nms:26
msgid "], [ # Objects of 2nd image."
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection:21
#: renom_img.api.utility.load.parse_xml_detection:22
#: renom_img.api.utility.nms.nms:14 renom_img.api.utility.nms.nms:15
#: renom_img.api.utility.nms.nms:32 renom_img.api.utility.nms.nms:33
#: renom_img.api.utility.nms.soft_nms:13 renom_img.api.utility.nms.soft_nms:14
#: renom_img.api.utility.nms.soft_nms:31 renom_img.api.utility.nms.soft_nms:32
msgid "]"
msgstr ""

#: ../../docstring of renom_img.api.utility.load.parse_xml_detection
#: renom_img.api.utility.nms.nms renom_img.api.utility.nms.soft_nms
#: renom_img.api.utility.target.DataBuilderClassification.build
#: renom_img.api.utility.target.DataBuilderDetection.build
msgid "Return type"
msgstr ""

#: ../../rst/renom_img.api.utility.rst:19
msgid "renom\\_img.api.utility.nms"
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.nms:1
msgid "NMS(Non maximum suppression)"
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.nms:3
#: renom_img.api.utility.nms.nms:20 renom_img.api.utility.nms.soft_nms:19
msgid ""
"[         [ # Objects of 1st image.             {'box': [x(float), y, w, "
"h], 'class': class_id(int), 'score': score},             {'box': "
"[x(float), y, w, h], 'class': class_id(int), 'score': score},"
"             ...         ],         [ # Objects of 2nd image."
"             {'box': [x(float), y, w, h], 'class': class_id(int), "
"'score': score},             {'box': [x(float), y, w, h], 'class': "
"class_id(int), 'score': score},             ...         ]     ]"
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.nms:6
#: renom_img.api.utility.nms.nms:11 renom_img.api.utility.nms.nms:24
#: renom_img.api.utility.nms.nms:29 renom_img.api.utility.nms.soft_nms:5
#: renom_img.api.utility.nms.soft_nms:10 renom_img.api.utility.nms.soft_nms:23
#: renom_img.api.utility.nms.soft_nms:28
msgid ""
"{'box': [x(float), y, w, h], 'class': class_id(int), 'score': score}, "
"{'box': [x(float), y, w, h], 'class': class_id(int), 'score': score}, ..."
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.nms:17
#: renom_img.api.utility.nms.soft_nms:16
msgid "Defaults to `0.5`. This represents the ratio of overlap between boxes."
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.soft_nms:1
msgid "Soft-NMS. :param preds:"
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.soft_nms:37
msgid "Reference:"
msgstr ""

#: ../../docstring of renom_img.api.utility.nms.soft_nms:36
msgid ""
"Navaneeth Bodla, Bharat Singh, Rama Chellappa, Larry S. Davis, Soft-NMS "
"-- Improving Object Detection With One Line of Code "
"https://arxiv.org/abs/1704.04503"
msgstr ""

#: ../../rst/renom_img.api.utility.rst:27
msgid "renom\\_img.api.utility.target"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderBase:1
msgid "Bases: :class:`object`"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification:1
#: renom_img.api.utility.target.DataBuilderDetection:1
#: renom_img.api.utility.target.DataBuilderSegmentation:1
msgid "Bases: :class:`renom_img.api.utility.target.DataBuilderBase`"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification:1
msgid "Data builder for classification task"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification:3
#: renom_img.api.utility.target.DataBuilderDetection:3
msgid "Input image size"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification:5
#: renom_img.api.utility.target.DataBuilderDetection:5
msgid "List of class id"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification.build:1
#: renom_img.api.utility.target.DataBuilderDetection.build:1
msgid "List of input image paths."
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification.build:3
#: renom_img.api.utility.target.DataBuilderDetection.build:3
msgid "List of class id [1, 4, 6 (int)]"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification.build:6
#: renom_img.api.utility.target.DataBuilderDetection.build:6
msgid "Instance of the augmentation class."
msgstr ""

#: of renom_img.api.utility.target.DataBuilderClassification.build:9
msgid "Batch of images y(ndarray): One hot labels for each image in a batch"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderDetection:1
msgid "Data builder for detection task"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderDetection.build:9
msgid ""
"Batch of images y(ndarray): The shape of ndarray is [# images, maximum "
"number of objects in an image * (4(coordinates) + 1(confidence))]"
msgstr ""

#: of renom_img.api.utility.target.DataBuilderSegmentation:1
msgid "Annotation_list must be list of class name."
msgstr ""

#~ msgid "Soft-NMS."
#~ msgstr ""

#~ msgid ""
#~ "Use to transform a list of objects"
#~ " per image into a "
#~ "image*cells*cells*(5+classes) matrix."
#~ msgstr ""

#~ msgid "Yolo formatted target array."
#~ msgstr ""

#~ msgid ""
#~ "This method returns yolo formatted "
#~ "target array which shape is (N, "
#~ "cell*cell*(5 + 1). N is batch "
#~ "size. The array consists of following"
#~ " data."
#~ msgstr ""

#~ msgid "existence flag: A flag which indicates if an object exists in the cell."
#~ msgstr ""

#~ msgid "Coordinates and size(x, y, w, h): Coordinate and size of each objects."
#~ msgstr ""

#~ msgid "Class id: The object's class number."
#~ msgstr ""

#~ msgid ""
#~ "[existence x y w h 2 existence "
#~ "x y w h 2 ... ], [existence"
#~ " x y w h 3 existence x y"
#~ " w h 1 ... ],"
#~ msgstr ""

